package com.mendes.caixa2025.service;

import java.util.HashMap;
import java.util.Map;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mendes.caixa2025.model.Users;
import com.mendes.caixa2025.repository.UsuarioRepository;

@Service
public class AuthService {

    private final UsuarioRepository usuarioRepository;
    private final TokenJwtService tokenJwtService;
    private final PasswordEncoder passwordEncoder;
//CONSTUTORES//
    public AuthService(UsuarioRepository usuarioRepository, TokenJwtService tokenJwtService,
            PasswordEncoder passwordEncoder) {
        this.usuarioRepository = usuarioRepository;
        this.tokenJwtService = tokenJwtService;
        this.passwordEncoder = passwordEncoder;
    }
    //1- buscar usuario no banco
    public String autenticar(String username, String password) {
        Users usuario = usuarioRepository.findByUsername(username)
            .orElseThrow(() -> new RuntimeException("Usuario não encontrado "));

    //2- verifica a senha
    if (!passwordEncoder.matches(password, usuario.getPassword())) {
            throw new CredenciaisInvalidasException ("Senha incorreta");
    }        

    //3-verifica se a conta esta ativa
    if (!usuario.isEnabled() ||
        !usuario.isAccountNonExpired()||
        !usuario.isAccountNonLocked() ||
        !usuario.isCredentialsNonExpired()) {
        throw new ContaInativaException("Conta desativada ou bloqueada");
    }

    //4-gera o token JWT
    String token = tokenJwtService.gerarToken(usuario.getUsername());
    
    //5-Cria a resposta
    return criarRespostaToken(token);
}

private String criarRespostaToken(String token) {
    Map<String, Object> response = new HashMap<>();
    response.put("access_token", token);
    response.put("token_type", "Bearer");
    response.put("expires_in", tokenJwtService.getExpirationTime() / 1000);

    try{
        return new ObjectMapper().writeValueAsString(response);
    } catch (JsonProcessingException e){
        throw new TokenGenerationException("Erro ao gerar resposta de autenticação", e);
        }
    }
}